// Generated by gencpp from file srl_origami_manipulator/I2C_msg.msg
// DO NOT EDIT!


#ifndef SRL_ORIGAMI_MANIPULATOR_MESSAGE_I2C_MSG_H
#define SRL_ORIGAMI_MANIPULATOR_MESSAGE_I2C_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <srl_origami_manipulator/motorCmd.h>

namespace srl_origami_manipulator
{
template <class ContainerAllocator>
struct I2C_msg_
{
  typedef I2C_msg_<ContainerAllocator> Type;

  I2C_msg_()
    : setPoint()
    , slaveAddress()  {
    }
  I2C_msg_(const ContainerAllocator& _alloc)
    : setPoint(_alloc)
    , slaveAddress(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::srl_origami_manipulator::motorCmd_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srl_origami_manipulator::motorCmd_<ContainerAllocator> >::other >  _setPoint_type;
  _setPoint_type setPoint;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _slaveAddress_type;
  _slaveAddress_type slaveAddress;





  typedef boost::shared_ptr< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> const> ConstPtr;

}; // struct I2C_msg_

typedef ::srl_origami_manipulator::I2C_msg_<std::allocator<void> > I2C_msg;

typedef boost::shared_ptr< ::srl_origami_manipulator::I2C_msg > I2C_msgPtr;
typedef boost::shared_ptr< ::srl_origami_manipulator::I2C_msg const> I2C_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace srl_origami_manipulator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'srl_origami_manipulator': ['/home/shared/ws/src/srl_origami_manipulator/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12ba8230fa92ad82e9f73eadbdbea506";
  }

  static const char* value(const ::srl_origami_manipulator::I2C_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12ba8230fa92ad82ULL;
  static const uint64_t static_value2 = 0xe9f73eadbdbea506ULL;
};

template<class ContainerAllocator>
struct DataType< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srl_origami_manipulator/I2C_msg";
  }

  static const char* value(const ::srl_origami_manipulator::I2C_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motorCmd[] setPoint\n\
int32[] slaveAddress\n\
================================================================================\n\
MSG: srl_origami_manipulator/motorCmd\n\
int8[] motor_cmd\n\
";
  }

  static const char* value(const ::srl_origami_manipulator::I2C_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.setPoint);
      stream.next(m.slaveAddress);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct I2C_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srl_origami_manipulator::I2C_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srl_origami_manipulator::I2C_msg_<ContainerAllocator>& v)
  {
    s << indent << "setPoint[]" << std::endl;
    for (size_t i = 0; i < v.setPoint.size(); ++i)
    {
      s << indent << "  setPoint[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::srl_origami_manipulator::motorCmd_<ContainerAllocator> >::stream(s, indent + "    ", v.setPoint[i]);
    }
    s << indent << "slaveAddress[]" << std::endl;
    for (size_t i = 0; i < v.slaveAddress.size(); ++i)
    {
      s << indent << "  slaveAddress[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.slaveAddress[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRL_ORIGAMI_MANIPULATOR_MESSAGE_I2C_MSG_H
