# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from srl_origami_manipulator/I2C_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import srl_origami_manipulator.msg

class I2C_msg(genpy.Message):
  _md5sum = "12ba8230fa92ad82e9f73eadbdbea506"
  _type = "srl_origami_manipulator/I2C_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """motorCmd[] setPoint
int32[] slaveAddress
================================================================================
MSG: srl_origami_manipulator/motorCmd
int8[] motor_cmd"""
  __slots__ = ['setPoint','slaveAddress']
  _slot_types = ['srl_origami_manipulator/motorCmd[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       setPoint,slaveAddress

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(I2C_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.setPoint is None:
        self.setPoint = []
      if self.slaveAddress is None:
        self.slaveAddress = []
    else:
      self.setPoint = []
      self.slaveAddress = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.setPoint)
      buff.write(_struct_I.pack(length))
      for val1 in self.setPoint:
        length = len(val1.motor_cmd)
        buff.write(_struct_I.pack(length))
        pattern = '<%sb'%length
        buff.write(struct.pack(pattern, *val1.motor_cmd))
      length = len(self.slaveAddress)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.slaveAddress))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.setPoint is None:
        self.setPoint = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.setPoint = []
      for i in range(0, length):
        val1 = srl_origami_manipulator.msg.motorCmd()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sb'%length
        start = end
        end += struct.calcsize(pattern)
        val1.motor_cmd = struct.unpack(pattern, str[start:end])
        self.setPoint.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.slaveAddress = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.setPoint)
      buff.write(_struct_I.pack(length))
      for val1 in self.setPoint:
        length = len(val1.motor_cmd)
        buff.write(_struct_I.pack(length))
        pattern = '<%sb'%length
        buff.write(val1.motor_cmd.tostring())
      length = len(self.slaveAddress)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.slaveAddress.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.setPoint is None:
        self.setPoint = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.setPoint = []
      for i in range(0, length):
        val1 = srl_origami_manipulator.msg.motorCmd()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sb'%length
        start = end
        end += struct.calcsize(pattern)
        val1.motor_cmd = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
        self.setPoint.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.slaveAddress = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
